#ifndef lock_server_cache_h
#define lock_server_cache_h

#include <string>
#include "lock_protocol.h"
#include "rpc.h"
#include "lock_server.h"



class lock_server_cache {
 private:
  enum server_lock_stat{
    FREE,
    LOCKED
  };
  struct server_lock{
    server_lock_stat sestat;
    int owned_client_id;  //which client owns the lock, if free the value is 0
    int acquiring_client_id; // which client is acquiring the lock
    int sequence_num;
    lock_protocol::lockid_t lock_id;
  };
  std::map<lock_protocol::lockid_t, server_lock *> server_locks;
  std::list<server_lock *> revoke_list;
  std::list<server_lock *> retry_list;
  std::map<int, std::string> addr_map; 
  
  std::map<int, rpcc*> rpcc_map;
  //  rpcc* get_rpcc(int);  //get client addr from client id

 public:
  lock_server_cache();
  lock_protocol::status stat(lock_protocol::lockid_t, int &);
  void revoker();
  void retryer();
  lock_protocol::status handleAcquire(int, std::string, int, lock_protocol::lockid_t, int&);
  lock_protocol::status handleRelease(int, std::string, int, lock_protocol::lockid_t, int&);
};

#endif
