#include "rpc.h"
#include <arpa/inet.h>
#include <stdlib.h>
#include <stdio.h>
#include "lock_server_cache.h"

#include "jsl_log.h"



int
main(int argc, char *argv[])
{

	
//	assert(0==pthread_mutex_init(&count_mutex, NULL));
//	assert(0==pthread_cond_init (&count_threshold_cv, NULL));
	
  int count = 0;

  setvbuf(stdout, NULL, _IONBF, 0);
  setvbuf(stderr, NULL, _IONBF, 0);

  srandom(getpid());

  if(argc != 2){
    fprintf(stderr, "Usage: %s port\n", argv[0]);
    exit(1);
  }
	

  char *count_env = getenv("RPC_COUNT");
  if(count_env != NULL){
    count = atoi(count_env);
  }

  //jsl_set_debug(2);

#ifndef RSM
  lock_server ls;
	lock_server_cache lsc;
  rpcs server(atoi(argv[1]), count);
  server.reg(lock_protocol::stat, &ls, &lock_server::stat);
	
	//lab1
	server.reg(lock_protocol::acquire, &ls, &lock_server::handleAcquire);  //listening to assigned port 
	printf("successfully register handleAcquire\n");
	server.reg(lock_protocol::release, &ls, &lock_server::handleRelease);
	
	server.reg(lock_protocol::acquire, &lsc, &lock_server_cache::handleAcquire );
	server.reg(lock_protocol::release, &lsc, &lock_server_cache::handleRelease );
	
#endif


  while(1)
    sleep(1000);
}
